#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the minimumBribes function below.
def minimumBribes(q):
    bribes = 0
    chaos = False
    old_place = q
    n = len(q)
    new_place = list(range(1,n+1))
    # diff = old_place - new_place
    diff = [i - j for i, j in zip(old_place, new_place)]
    fell_back = []
    fell_back_count = 0
    for i,change in enumerate(diff):
        # Count easy-to-count bribes
        # (ie, those that moved forward)
        if change > 0:
            fell_back.append(0)
            if change <= 2:
                bribes += change
            else:
                print("Too chaotic")
                chaos = True
                break
        # Prepare to
        # count hard-to-count bribes
        # (ie, those that fell back and moved forward)
        if change <= 0:
            fell_back_count += 1
            fell_back.append(0)
            fell_back[i+change] = fell_back_count

    if chaos == False:

        # Prepare more..
        fell_back_ref = []
        fell_back_ref_count = 0
        for number in fell_back:
            if number > 0:
                fell_back_ref_count += 1
                fell_back_ref.append(fell_back_ref_count)
            else:
                fell_back_ref.append(0)

        # Prepare more..
        # fell_back_diff = fell_back_ref - fell_back
        fell_back_diff = [i - j for i, j in zip(fell_back_ref, fell_back)]

        # Count
        for change in fell_back_diff:
            if change > 0:
                if change <= 2:
                    bribes += change
                else:
                    print("Too chaotic")
                    chaos = True
                    break

    if chaos == False:
        print(bribes)


if __name__ == '__main__':
    t = int(input())

    for t_itr in range(t):
        n = int(input())

        q = list(map(int, input().rstrip().split()))

        minimumBribes(q)
